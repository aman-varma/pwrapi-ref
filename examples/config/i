diff --git a/examples/config/daemon.py b/examples/config/daemon.py
index f727c14..9023cc0 100755
--- a/examples/config/daemon.py
+++ b/examples/config/daemon.py
@@ -12,43 +12,52 @@ machineName = os.environ['POWERRT_MACHINE'];
 
 machine = __import__(machineName,fromlist=[''])
 
-def calcTree( myNode, nidMap, nodesPerBoard ):
+
+def calcRtrRoot( myNode, nidMap, nodesPerBoard ):
+
+	if len(nidMap) == 1:
+		return ''
+	ret = ''
+	
+	otherHostPort = 16000
+	#print 'len nidMap {0} nodesPerBoard {1}'.format( len(nidMap), nodesPerBoard) 
+
+	numLinks = len(nidMap) / nodesPerBoard 
+	if len(nidMap) % nodesPerBoard: 
+		numLinks += 1
+
+	for i in xrange( 0, numLinks):
+		myListenPort = 16000 + i
+		otherHost = nidMap[ i * nodesPerBoard ]
+		tmp = ' --rtr.routerInfo={0}:{1}:{2}:{3}:{4}:{5}'.\
+					format( i, myListenPort, otherHost, otherHostPort, i, i)
+		ret += tmp
+
+	return ret
+		
+
+def calcRtrLeaf( myNode, nidMap, nodesPerBoard, rootRtr ):
 
 	routerID = myNode/nodesPerBoard
 	#print "calcTree( {0} {1} {2})".format( myNode, len(nidMap), routerID )
 
 	ret = '' 
 
-	if len(nidMap) <= nodesPerBoard:
-		return ""
-
-	if 0 == routerID:
-		otherHostPort = 16000
-		#print 'len nidMap {0} nodesPerBoard {1}'.format( len(nidMap), nodesPerBoard) 
-		numLinks = len(nidMap) / nodesPerBoard 
-		if len(nidMap) % nodesPerBoard: 
-			numLinks += 1
-
-		for i in xrange( 1, numLinks ):
-			myListenPort = 16000 + i
-			other = i * nodesPerBoard
-			otherHost = nidMap[other]
-			tmp = ' --rtr.routerInfo={0}:{1}:{2}:{3}:{4}:{5}'.\
-					format( i, myListenPort, otherHost, otherHostPort, i, i)
-			ret += tmp
-	else:
-		
-		myListenPort = 16000
-		otherHost = nidMap[0]
-		otherHostPort = 16000 + routerID 
+	#if len(nidMap) <= nodesPerBoard:
+	#	return '' 
+
+	myListenPort = 16000
+	otherHost = nidMap[rootRtr]
+	otherHostPort = 16000 + routerID 
 	
-		ret += ' --rtr.routerInfo={0}:{1}:{2}:{3}'.\
+	ret += ' --rtr.routerInfo={0}:{1}:{2}:{3}'.\
 					format( 0, myListenPort, otherHost, otherHostPort )
 
 	#print 'calcTree(',myNode,')', ret
 
 	return ret
 
+
 def calcBoardRoot( myNode, numRanks, nodesPerBoard, boardsPerCab ):
 
 	cab = (myNode / (nodesPerBoard * boardsPerCab ) )
@@ -72,19 +81,40 @@ def calcNodeRoot( myNode, numRanks, nodesPerBoard, boardsPerCab ):
 	return tmp 
 
 
-def configRtr( myNode, nidMap, config, routeFile, nodesPerBoard ):
-	tmp = ""
-
+def im_a_rtr( myNode, nodesPerBoard, rootRtr):
+	if myNode == rootRtr:
+		return True
+	
 	if not myNode % nodesPerBoard:
-		if 0 == myNode % nodesPerBoard:
-			tmp += ' --rtr.clientPort=15000'
-		tmp += ' --rtr.serverPort=15001'
-		tmp += ' --rtr.routerType=tree'
-		tmp += calcTree( myNode, nidMap, nodesPerBoard  ) 
+		return True 
+
+	return False
+ 
+def configRtr( myNode, nidMap, config, routeFile, nodesPerBoard, rootRtr ):
+
+	if not im_a_rtr( myNode, nodesPerBoard, rootRtr):   
+		return ''
+
+	tmp = '' 
+
+	tmp += ' --rtr.serverPort=15001'
+	tmp += ' --rtr.routerType=tree'
+
+	if myNode == rootRtr: 
+		tmp += ' --rtr.clientPort=15000'
+		rtrID = len(nidMap) / nodesPerBoard
+
+		if len(nidMap) > 1 and len(nidMap) % nodesPerBoard:
+			rtrID += 1 
+
+		tmp += ' --rtr.routerId=' + str( rtrID )
+		tmp += calcRtrRoot( myNode, nidMap, nodesPerBoard ) 
+	else:
 		tmp += ' --rtr.routerId=' + str( myNode/nodesPerBoard )
-		tmp += ' --rtr.routeTable=' + routeFile
-		tmp += ' --rtr.pwrApiConfig=' + config
+		tmp += calcRtrLeaf( myNode, nidMap, nodesPerBoard,rootRtr  ) 
 
+	tmp += ' --rtr.routeTable=' + routeFile
+	tmp += ' --rtr.pwrApiConfig=' + config
 
 	return tmp
 
@@ -114,23 +144,27 @@ def configNode( myNode, nidMap, config, nodesPerBoard, boardsPerCab ):
 	#print 'configNode(',myNode,')',tmp 
 	return  tmp
 
-def initDaemon( exe, myNode, nidMap, config, routeFile ):
+def initDaemon( exe, myNode, nidMap, config, routeFile, rootRtr ):
 	#print "nidmap={0} myNode={1}".format( nidMap, myNode)
 
 	nodesPerBoard = machine.nodesPerBoard 
 	boardsPerCab = machine.boardsPerCab 
 
+	print 'rootRtr', rootRtr
+
 	tmp = exe + ' '
 
-	tmp += configRtr( myNode, nidMap, config, routeFile,nodesPerBoard )
+	tmp += configRtr( myNode, nidMap, config, routeFile,nodesPerBoard, rootRtr )
 	tmp += configNode( myNode, nidMap, config, nodesPerBoard, boardsPerCab )
 	tmp += configBoard( myNode, nidMap, config, nodesPerBoard, boardsPerCab )
 
 	#print 'initDaemon(',myNode,')',tmp
 	return tmp	
 
-def initLogger( config, apiroot, serverHost, serverPort, object, logfile ):
+def initLogger( myNode, nidMap, config, apiroot, object, logfile ):
 
+	serverHost = nidMap[myNode]
+	serverPort = 15001
 	nodesPerBoard = machine.nodesPerBoard 
 	boardsPerCab = machine.boardsPerCab 
 
@@ -149,6 +183,7 @@ def initLogger( config, apiroot, serverHost, serverPort, object, logfile ):
 	return tmp
 
 def initClient( exe, object, logfile ):
+	sys.exit('initClient fix me')
 	tmp = exe
 	tmp += ' --object=' + object
 	tmp += ' --count=0'
diff --git a/examples/config/exec.py b/examples/config/exec.py
index 16fff3b..15c7f33 100755
--- a/examples/config/exec.py
+++ b/examples/config/exec.py
@@ -2,9 +2,9 @@
 
 import sys, os, platform
 
-#print 'exec.py start'
+print 'exec.py start'
 
-daemonDebug = 0#8 
+daemonDebug = 5#8 
 clientDebug = 0#8 
 apiroot= 'plat'
 
@@ -46,28 +46,35 @@ def initDaemonEnv( nidlist ):
 def GetApps(node, config, nidlist, routeFile, object, logfile, daemonExe, clientExe):
 	#print 'GetApps {0}, {1}, {2}, {3}'.format( node, config, nidlist, routeFile )
 	nidMap = xxx.createNidMap( nidlist )
-	if nidMap[node] != platform.node():
-		print 'ERROR: exec.py, bad nidMap', nidMap[node], '!=', platform.node() 
-		sys.exit(-1)
+	#if nidMap[node] != platform.node():
+		#print 'ERROR: exec.py, bad nidMap', nidMap[node], '!=', platform.node() 
+		#sys.exit(-1)
 
 	machine.genRouteFile( routeFile )
 
+	rootRtr = machine.nodesPerBoard
+	if len(nidMap) < machine.nodesPerBoard:
+		rootRtr = len(nidMap)
+
+	rootRtr -= 1
+
 	ret = []
 
-	exe = daemon.initDaemon( daemonExe, node, nidMap, config, routeFile )
-	if not clientExe and  0 == int(node):
-		exe += daemon.initLogger( config, apiroot, nidMap[0], 15000, object, logfile )
+	exe = daemon.initDaemon( daemonExe, node, nidMap, config, routeFile, rootRtr )
+
+	if not clientExe and  node == rootRtr:
+		exe += daemon.initLogger( node, nidMap, config, apiroot, object, logfile )
 
 	exe = exe.split(' ')
 
 	env = initDaemonEnv( nidlist ).split(' ') 
 	ret += [ [ exe, env ]  ] 
 
-	if clientExe and 0 == int(node):
+	if clientExe and len(nidMap)-1 == int(node):
 		exe = daemon.initClient( clientExe, object, logfile ).split(' ')
-		env = initClientEnv( config, apiroot, nidMap[0], 15000 ).split(' ') 
+		env = initClientEnv( config, apiroot, len(nidMap)-1, 15000 ).split(' ') 
 		ret += [ [ exe, env ]  ] 
 
 	return ret 
 
-#print 'exec.py end'
+print 'exec.py end'
